[{"path":"https://feddelegrand7.github.io/rlowdb/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 rlowdb authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mohamed El Fodil Ihaddaden. Author, maintainer. lowdb developers. Contributor, copyright holder.           developers lowdb package","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ihaddaden M (2025). rlowdb: Lightweight JSON-Based Database. R package version 0.1.0, https://feddelegrand7.github.io/rlowdb/.","code":"@Manual{,   title = {rlowdb: Lightweight JSON-Based Database},   author = {Mohamed El Fodil Ihaddaden},   year = {2025},   note = {R package version 0.1.0},   url = {https://feddelegrand7.github.io/rlowdb/}, }"},{"path":"https://feddelegrand7.github.io/rlowdb/index.html","id":"rlowdb","dir":"","previous_headings":"","what":"Lightweight JSON-Based Database","title":"Lightweight JSON-Based Database","text":"rlowdb lightweight, JSON-based database R, inspired LowDB JavaScript. provides simple efficient way store, retrieve, update, delete structured data without need full database system.","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Lightweight JSON-Based Database","text":"Lightweight & File-Based: Uses JSON persistent storage. Easy--Use API: Supports CRUD operations (Create, Read, Update, Delete). Flexible Queries: Allows filtering expressive conditions. External Dependencies: need SQL additional database software.","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Lightweight JSON-Based Database","text":"rlowdb yet available CRAN, can install GitHub:","code":"devtools::install_github(\"feddelegrand7/rlowdb\")"},{"path":[]},{"path":"https://feddelegrand7.github.io/rlowdb/index.html","id":"initializing-the-database","dir":"","previous_headings":"Usage","what":"Initializing the Database","title":"Lightweight JSON-Based Database","text":"start using `rlowdb``, create new database instance specifying JSON file:","code":"library(rlowdb) db <- rlowdb$new(\"DB.json\")"},{"path":"https://feddelegrand7.github.io/rlowdb/index.html","id":"inserting-data","dir":"","previous_headings":"Usage","what":"Inserting Data","title":"Lightweight JSON-Based Database","text":"insert method takes two parameters, collection record, think collection parameter table SQL world. Think record parameter list names, name/value pair representing specific column ’s value. Add records collection:","code":"db$insert(   collection = \"users\",    record = list(id = 1, name = \"Ali\", age = 30) ) db$insert(   collection = \"users\",    record = list(id = 2, name = \"Bob\", age = 25) )  db$insert(   collection = \"users\",    record = list(id = 3, name = \"Alice\", age = 30) )"},{"path":"https://feddelegrand7.github.io/rlowdb/index.html","id":"transaction","dir":"","previous_headings":"","what":"Transaction","title":"Lightweight JSON-Based Database","text":"Using transaction method, can insert set records error occurs process, rollback triggered restore initial state database. Note insertion operated using function:","code":"db$count(\"users\") #> [1] 3 db$transaction(function() {     db$insert(\"users\", list(name = \"Zlatan\", age = 40))     db$insert(\"users\", list(name = \"Neymar\", age = 28))     stop(\"some errors\")     db$insert(\"users\", list(name = \"Ronaldo\", age = 30)) }) #> Error in value[[3L]](cond): Transaction failed: some errors db$count(\"users\") #> [1] 3"},{"path":"https://feddelegrand7.github.io/rlowdb/index.html","id":"retrieving-data","dir":"","previous_headings":"","what":"Retrieving Data","title":"Lightweight JSON-Based Database","text":"Get stored data: Find specific record:","code":"db$get_data() #> $users #> $users[[1]] #> $users[[1]]$id #> [1] 1 #>  #> $users[[1]]$name #> [1] \"Ali\" #>  #> $users[[1]]$age #> [1] 30 #>  #>  #> $users[[2]] #> $users[[2]]$id #> [1] 2 #>  #> $users[[2]]$name #> [1] \"Bob\" #>  #> $users[[2]]$age #> [1] 25 #>  #>  #> $users[[3]] #> $users[[3]]$id #> [1] 3 #>  #> $users[[3]]$name #> [1] \"Alice\" #>  #> $users[[3]]$age #> [1] 30 db$find(collection = \"users\", key = \"id\", value = 1) #> [[1]] #> [[1]]$id #> [1] 1 #>  #> [[1]]$name #> [1] \"Ali\" #>  #> [[1]]$age #> [1] 30"},{"path":"https://feddelegrand7.github.io/rlowdb/index.html","id":"updating-records","dir":"","previous_headings":"","what":"Updating Records","title":"Lightweight JSON-Based Database","text":"Modify existing records: upsert methods allows update record exists, otherwise, inserted. Note collection key need exist:","code":"db$update(   collection = \"users\",    key = \"id\",    value = 1,    new_data = list(age = 31) )  db$get_data() #> $users #> $users[[1]] #> $users[[1]]$id #> [1] 1 #>  #> $users[[1]]$name #> [1] \"Ali\" #>  #> $users[[1]]$age #> [1] 31 #>  #>  #> $users[[2]] #> $users[[2]]$id #> [1] 2 #>  #> $users[[2]]$name #> [1] \"Bob\" #>  #> $users[[2]]$age #> [1] 25 #>  #>  #> $users[[3]] #> $users[[3]]$id #> [1] 3 #>  #> $users[[3]]$name #> [1] \"Alice\" #>  #> $users[[3]]$age #> [1] 30 db$upsert(   collection = \"users\",    key = \"id\",    value = 1,    new_data = list(age = 25) )  db$get_data() #> $users #> $users[[1]] #> $users[[1]]$id #> [1] 1 #>  #> $users[[1]]$name #> [1] \"Ali\" #>  #> $users[[1]]$age #> [1] 25 #>  #>  #> $users[[2]] #> $users[[2]]$id #> [1] 2 #>  #> $users[[2]]$name #> [1] \"Bob\" #>  #> $users[[2]]$age #> [1] 25 #>  #>  #> $users[[3]] #> $users[[3]]$id #> [1] 3 #>  #> $users[[3]]$name #> [1] \"Alice\" #>  #> $users[[3]]$age #> [1] 30 db$upsert(   collection = \"users\",    key = \"id\",    value = 100,    new_data = list(age = 25) )  db$get_data() #> $users #> $users[[1]] #> $users[[1]]$id #> [1] 1 #>  #> $users[[1]]$name #> [1] \"Ali\" #>  #> $users[[1]]$age #> [1] 25 #>  #>  #> $users[[2]] #> $users[[2]]$id #> [1] 2 #>  #> $users[[2]]$name #> [1] \"Bob\" #>  #> $users[[2]]$age #> [1] 25 #>  #>  #> $users[[3]] #> $users[[3]]$id #> [1] 3 #>  #> $users[[3]]$name #> [1] \"Alice\" #>  #> $users[[3]]$age #> [1] 30 #>  #>  #> $users[[4]] #> $users[[4]]$id #> [1] 100 #>  #> $users[[4]]$age #> [1] 25"},{"path":"https://feddelegrand7.github.io/rlowdb/index.html","id":"deleting-records","dir":"","previous_headings":"","what":"Deleting Records","title":"Lightweight JSON-Based Database","text":"","code":"db$delete(collection = \"users\", key = \"id\", value = 100)   db$get_data() #> $users #> $users[[1]] #> $users[[1]]$id #> [1] 1 #>  #> $users[[1]]$name #> [1] \"Ali\" #>  #> $users[[1]]$age #> [1] 25 #>  #>  #> $users[[2]] #> $users[[2]]$id #> [1] 2 #>  #> $users[[2]]$name #> [1] \"Bob\" #>  #> $users[[2]]$age #> [1] 25 #>  #>  #> $users[[3]] #> $users[[3]]$id #> [1] 3 #>  #> $users[[3]]$name #> [1] \"Alice\" #>  #> $users[[3]]$age #> [1] 30"},{"path":"https://feddelegrand7.github.io/rlowdb/index.html","id":"bulk-inserting","dir":"","previous_headings":"","what":"Bulk Inserting","title":"Lightweight JSON-Based Database","text":"can insert many records using buld_insert method:","code":"db$bulk_insert(\"users\", list(     list(id = 1, name = \"Antoine\", age = 52),     list(id = 2, name = \"Omar\", age = 23),     list(id = 3, name = \"Nabil\", age = 41) ))"},{"path":"https://feddelegrand7.github.io/rlowdb/index.html","id":"querying-data","dir":"","previous_headings":"","what":"Querying Data","title":"Lightweight JSON-Based Database","text":"Find users older 25: Query multiple conditions:","code":"db$query(collection = \"users\", condition = \"age > 25\") #> [[1]] #> [[1]]$id #> [1] 3 #>  #> [[1]]$name #> [1] \"Alice\" #>  #> [[1]]$age #> [1] 30 #>  #>  #> [[2]] #> [[2]]$id #> [1] 1 #>  #> [[2]]$name #> [1] \"Antoine\" #>  #> [[2]]$age #> [1] 52 #>  #>  #> [[3]] #> [[3]]$id #> [1] 3 #>  #> [[3]]$name #> [1] \"Nabil\" #>  #> [[3]]$age #> [1] 41 db$query(collection = \"users\", condition = \"age > 20 & id > 1\") #> [[1]] #> [[1]]$id #> [1] 2 #>  #> [[1]]$name #> [1] \"Bob\" #>  #> [[1]]$age #> [1] 25 #>  #>  #> [[2]] #> [[2]]$id #> [1] 3 #>  #> [[2]]$name #> [1] \"Alice\" #>  #> [[2]]$age #> [1] 30 #>  #>  #> [[3]] #> [[3]]$id #> [1] 2 #>  #> [[3]]$name #> [1] \"Omar\" #>  #> [[3]]$age #> [1] 23 #>  #>  #> [[4]] #> [[4]]$id #> [1] 3 #>  #> [[4]]$name #> [1] \"Nabil\" #>  #> [[4]]$age #> [1] 41"},{"path":"https://feddelegrand7.github.io/rlowdb/index.html","id":"filter-data","dir":"","previous_headings":"","what":"Filter Data","title":"Lightweight JSON-Based Database","text":"filter method allows apply predicate function (function returns TRUE FALSE) order get specific set records:","code":"db$filter(\"users\", function(x) {   x$age > 30 }) #> [[1]] #> [[1]]$id #> [1] 1 #>  #> [[1]]$name #> [1] \"Antoine\" #>  #> [[1]]$age #> [1] 52 #>  #>  #> [[2]] #> [[2]]$id #> [1] 3 #>  #> [[2]]$name #> [1] \"Nabil\" #>  #> [[2]]$age #> [1] 41"},{"path":"https://feddelegrand7.github.io/rlowdb/index.html","id":"searching-data","dir":"","previous_headings":"","what":"Searching Data","title":"Lightweight JSON-Based Database","text":"search method allows search within character fields specific record. can also use regex:","code":"db$search(\"users\", \"name\", \"^Ali\", ignore.case = FALSE) #> [[1]] #> [[1]]$id #> [1] 1 #>  #> [[1]]$name #> [1] \"Ali\" #>  #> [[1]]$age #> [1] 25 #>  #>  #> [[2]] #> [[2]]$id #> [1] 3 #>  #> [[2]]$name #> [1] \"Alice\" #>  #> [[2]]$age #> [1] 30 db$search(\"users\", \"name\", \"alice\", ignore.case = TRUE) #> [[1]] #> [[1]]$id #> [1] 3 #>  #> [[1]]$name #> [1] \"Alice\" #>  #> [[1]]$age #> [1] 30"},{"path":"https://feddelegrand7.github.io/rlowdb/index.html","id":"listing-the-collections","dir":"","previous_headings":"","what":"Listing the collections","title":"Lightweight JSON-Based Database","text":"list_collections method returns names collections within DB:","code":"db$list_collections() #> [1] \"users\""},{"path":"https://feddelegrand7.github.io/rlowdb/index.html","id":"counting","dir":"","previous_headings":"","what":"Counting","title":"Lightweight JSON-Based Database","text":"Using count method, can get number records collection :","code":"db$count(collection = \"users\")  #> [1] 6"},{"path":"https://feddelegrand7.github.io/rlowdb/index.html","id":"check-if-exists","dir":"","previous_headings":"","what":"Check if exists","title":"Lightweight JSON-Based Database","text":"possible verify collection, key value exists within DB:","code":"db$exists_collection(collection = \"users\") #> [1] TRUE db$exists_collection(collection = \"nonexistant\") #> [1] FALSE db$exists_key(collection = \"users\", key = \"name\") #> [1] TRUE db$exists_value(   collection = \"users\",   key = \"name\",   value = \"Alice\" ) #> [1] TRUE db$exists_value(   collection = \"users\",   key = \"name\",   value = \"nonexistant\" ) #> [1] FALSE"},{"path":"https://feddelegrand7.github.io/rlowdb/index.html","id":"clear-drop-data","dir":"","previous_headings":"","what":"Clear, Drop Data","title":"Lightweight JSON-Based Database","text":"possible clear collection. remove elements belonging collection drop collection self: Now, look happened use clear method countries collection: Using drop method, one can drop whole collection: Finally, drop_all drop collections within DB:","code":"db$insert(collection = \"countries\", record = list(id = 1, country = \"Algeria\", continent = \"Africa\"))  db$insert(collection = \"countries\", record = list(id = 1, country = \"Germany\", continent = \"Europe\"))  db$get_data() #> $users #> $users[[1]] #> $users[[1]]$id #> [1] 1 #>  #> $users[[1]]$name #> [1] \"Ali\" #>  #> $users[[1]]$age #> [1] 25 #>  #>  #> $users[[2]] #> $users[[2]]$id #> [1] 2 #>  #> $users[[2]]$name #> [1] \"Bob\" #>  #> $users[[2]]$age #> [1] 25 #>  #>  #> $users[[3]] #> $users[[3]]$id #> [1] 3 #>  #> $users[[3]]$name #> [1] \"Alice\" #>  #> $users[[3]]$age #> [1] 30 #>  #>  #> $users[[4]] #> $users[[4]]$id #> [1] 1 #>  #> $users[[4]]$name #> [1] \"Antoine\" #>  #> $users[[4]]$age #> [1] 52 #>  #>  #> $users[[5]] #> $users[[5]]$id #> [1] 2 #>  #> $users[[5]]$name #> [1] \"Omar\" #>  #> $users[[5]]$age #> [1] 23 #>  #>  #> $users[[6]] #> $users[[6]]$id #> [1] 3 #>  #> $users[[6]]$name #> [1] \"Nabil\" #>  #> $users[[6]]$age #> [1] 41 #>  #>  #>  #> $countries #> $countries[[1]] #> $countries[[1]]$id #> [1] 1 #>  #> $countries[[1]]$country #> [1] \"Algeria\" #>  #> $countries[[1]]$continent #> [1] \"Africa\" #>  #>  #> $countries[[2]] #> $countries[[2]]$id #> [1] 1 #>  #> $countries[[2]]$country #> [1] \"Germany\" #>  #> $countries[[2]]$continent #> [1] \"Europe\" db$clear(\"countries\")  db$get_data() #> $users #> $users[[1]] #> $users[[1]]$id #> [1] 1 #>  #> $users[[1]]$name #> [1] \"Ali\" #>  #> $users[[1]]$age #> [1] 25 #>  #>  #> $users[[2]] #> $users[[2]]$id #> [1] 2 #>  #> $users[[2]]$name #> [1] \"Bob\" #>  #> $users[[2]]$age #> [1] 25 #>  #>  #> $users[[3]] #> $users[[3]]$id #> [1] 3 #>  #> $users[[3]]$name #> [1] \"Alice\" #>  #> $users[[3]]$age #> [1] 30 #>  #>  #> $users[[4]] #> $users[[4]]$id #> [1] 1 #>  #> $users[[4]]$name #> [1] \"Antoine\" #>  #> $users[[4]]$age #> [1] 52 #>  #>  #> $users[[5]] #> $users[[5]]$id #> [1] 2 #>  #> $users[[5]]$name #> [1] \"Omar\" #>  #> $users[[5]]$age #> [1] 23 #>  #>  #> $users[[6]] #> $users[[6]]$id #> [1] 3 #>  #> $users[[6]]$name #> [1] \"Nabil\" #>  #> $users[[6]]$age #> [1] 41 #>  #>  #>  #> $countries #> list() db$drop(collection = \"countries\") db$get_data() #> $users #> $users[[1]] #> $users[[1]]$id #> [1] 1 #>  #> $users[[1]]$name #> [1] \"Ali\" #>  #> $users[[1]]$age #> [1] 25 #>  #>  #> $users[[2]] #> $users[[2]]$id #> [1] 2 #>  #> $users[[2]]$name #> [1] \"Bob\" #>  #> $users[[2]]$age #> [1] 25 #>  #>  #> $users[[3]] #> $users[[3]]$id #> [1] 3 #>  #> $users[[3]]$name #> [1] \"Alice\" #>  #> $users[[3]]$age #> [1] 30 #>  #>  #> $users[[4]] #> $users[[4]]$id #> [1] 1 #>  #> $users[[4]]$name #> [1] \"Antoine\" #>  #> $users[[4]]$age #> [1] 52 #>  #>  #> $users[[5]] #> $users[[5]]$id #> [1] 2 #>  #> $users[[5]]$name #> [1] \"Omar\" #>  #> $users[[5]]$age #> [1] 23 #>  #>  #> $users[[6]] #> $users[[6]]$id #> [1] 3 #>  #> $users[[6]]$name #> [1] \"Nabil\" #>  #> $users[[6]]$age #> [1] 41 db$drop_all() db$get_data() #> named list()"},{"path":"https://feddelegrand7.github.io/rlowdb/index.html","id":"creating-a-backup","dir":"","previous_headings":"","what":"Creating a Backup","title":"Lightweight JSON-Based Database","text":"can create time backup database using backup method:","code":"db$backup(\"DB_backup.json\")"},{"path":"https://feddelegrand7.github.io/rlowdb/index.html","id":"restoring-a-database","dir":"","previous_headings":"","what":"Restoring a database","title":"Lightweight JSON-Based Database","text":"can restore backup database preexisting DB using restore method:","code":"db$restore(\"DB_backup.json\")"},{"path":"https://feddelegrand7.github.io/rlowdb/index.html","id":"error-handling","dir":"","previous_headings":"","what":"Error Handling","title":"Lightweight JSON-Based Database","text":"rlowdb provides error handling common issues. example, attempting update collection exist result informative error:","code":"db$update(   collection = \"nonexistant\",    key = \"id\",   value = 1,    new_data = list(age = 40) )   #> Error in private$.find_index_by_key(collection, key, value): Error: Collection 'nonexistant' does not exist."},{"path":"https://feddelegrand7.github.io/rlowdb/index.html","id":"future-features","dir":"","previous_headings":"","what":"Future Features","title":"Lightweight JSON-Based Database","text":"Support nested data structures. advanced query capabilities. Compatibility alternative file formats (e.g., CSV, SQLite).","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Lightweight JSON-Based Database","text":"Please note ralger project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":null,"dir":"Reference","previous_headings":"","what":"rlowdb: A Simple JSON-Based Database in R — rlowdb","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"`rlowdb` class provides lightweight, JSON-based database solution storing managing structured data R. supports CRUD operations (Create, Read, Update, Delete) enables querying custom functions.","code":""},{"path":[]},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"rlowdb$new() rlowdb$get_data() rlowdb$insert() rlowdb$find() rlowdb$update() rlowdb$upsert() rlowdb$delete() rlowdb$query() rlowdb$filter() rlowdb$drop() rlowdb$drop_all() rlowdb$clear() rlowdb$count() rlowdb$list_collections() rlowdb$exists_collection() rlowdb$exists_key() rlowdb$exists_value() rlowdb$transaction() rlowdb$restore() rlowdb$backup() rlowdb$search() rlowdb$bulk_insert() rlowdb$clone()","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"Initialize database, loading data JSON file. file exist, empty database created.","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"","code":"rlowdb$new(file_path)"},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"file_path path JSON file stores database.","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"method-get-data-","dir":"Reference","previous_headings":"","what":"Method get_data()","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"Retrieve stored data.","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"","code":"rlowdb$get_data()"},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"list containing database records.","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"","code":"db <- rlowdb$new(\"database.json\") db$insert(\"users\", list(id = 1, name = \"Alice\")) db$get_data() unlink(\"database.json\")"},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"method-insert-","dir":"Reference","previous_headings":"","what":"Method insert()","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"Insert new record specified collection.","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"","code":"rlowdb$insert(collection, record)"},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"collection collection name (string). record named list representing record insert.","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"","code":"db <- rlowdb$new(\"database.json\") db$insert(\"users\", list(id = 1, name = \"Alice\")) unlink(\"database.json\")"},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"method-find-","dir":"Reference","previous_headings":"","what":"Method find()","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"Find records collection match given key-value pair.","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"","code":"rlowdb$find(collection, key, value)"},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"collection collection name (string). key field name search . value value match.","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"list matching records. Returns empty list match found.","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"","code":"db <- rlowdb$new(\"database.json\") db$insert(\"users\", list(id = 1, name = \"Alice\")) db$find(\"users\", \"id\", 1) unlink(\"database.json\")"},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"method-update-","dir":"Reference","previous_headings":"","what":"Method update()","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"Update existing records collection.","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"","code":"rlowdb$update(collection, key, value, new_data)"},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"collection collection name. key field name search . value value match. new_data named list containing updated data.","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"examples-3","dir":"Reference","previous_headings":"","what":"Examples","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"","code":"db <- rlowdb$new(\"database.json\") db$insert(\"users\", list(id = 1, name = \"Alice\")) db$update(\"users\", \"id\", 1, list(name = \"Alice Updated\")) unlink(\"database.json\")"},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"method-upsert-","dir":"Reference","previous_headings":"","what":"Method upsert()","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"record exists, update ; otherwise, insert new record. Note order use method, 'collection' exist","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"","code":"rlowdb$upsert(collection, key, value, new_data)"},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"collection collection name. key field name search . value value match. new_data named list containing updated data.","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"examples-4","dir":"Reference","previous_headings":"","what":"Examples","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"","code":"db <- rlowdb$new(\"database.json\") db$insert(\"users\", list(id = 100, name = \"Coconut\")) db$upsert(\"users\", \"id\", 1, list(name = \"Alice Updated\")) unlink(\"database.json\")"},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"method-delete-","dir":"Reference","previous_headings":"","what":"Method delete()","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"Delete records collection match given key-value pair.","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"","code":"rlowdb$delete(collection, key, value)"},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"collection collection name. key field name search . value value match.","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"examples-5","dir":"Reference","previous_headings":"","what":"Examples","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"","code":"db <- rlowdb$new(\"database.json\") db$insert(\"users\", list(id = 1, name = \"Alice\")) db$delete(\"users\", \"id\", 1) db$get_data() unlink(\"database.json\")"},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"method-query-","dir":"Reference","previous_headings":"","what":"Method query()","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"Query collection using condition string. function allows filtering records collection using condition string evaluated dynamically. condition supports multiple logical expressions using standard R operators (e.g., `>`, `<`, `==`, `&`, `|`).","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"","code":"rlowdb$query(collection, condition = NULL)"},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"collection collection name (string). condition string representing logical condition filtering records. - Supports comparisons (`>`, `<`, `>=`, `<=`, `==`, `!=`). - Allows logical operators (`&` , `|` ). - Example: `\"views > 200 & id > 2\"`. - `NULL` empty string (`\"\"`), returns records.","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"list records satisfy condition. records match, returns empty list.","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"examples-6","dir":"Reference","previous_headings":"","what":"Examples","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"","code":"db <- rlowdb$new(\"database.json\") db$insert(\"posts\", list(id = 1, title = \"LowDB in R\", views = 100)) db$insert(\"posts\", list(id = 2, title = \"Data Management\", views = 250)) db$insert(\"posts\", list(id = 3, title = \"Advanced R\", views = 300))  # Query posts with views > 200 AND id > 2 db$query(\"posts\", \"views > 200 & id > 2\")  # Query posts with views > 100 OR id == 1 db$query(\"posts\", \"views > 100 | id == 1\")  # Query all posts (no condition) db$query(\"posts\", \"\")  unlink(\"database.json\")"},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"method-filter-","dir":"Reference","previous_headings":"","what":"Method filter()","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"Filter Records Using Custom Function method applies user-defined function filter records specified collection. function take record input return `TRUE` records included result `FALSE` records excluded.","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"","code":"rlowdb$filter(collection, filter_fn)"},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"collection character string specifying name collection. filter_fn function takes record (list) input returns `TRUE` `FALSE`.","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"list records satisfy filtering condition.","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"examples-7","dir":"Reference","previous_headings":"","what":"Examples","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"","code":"db <- rlowdb$new(\"database.json\") db$insert(\"users\", list(name = \"Delta\", age = 25)) db$insert(\"users\", list(name = \"Gamma\", age = 36)) # Find users older than 30 db$filter(\"users\", function(record) record$age > 30) unlink(\"database.json\")"},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"method-drop-","dir":"Reference","previous_headings":"","what":"Method drop()","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"Just like DROP TABLE SQL, drops complete collection.","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"","code":"rlowdb$drop(collection)"},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"collection collection name.","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"examples-8","dir":"Reference","previous_headings":"","what":"Examples","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"","code":"db <- rlowdb$new(\"database.json\") db$insert(\"users\", list(name = \"Delta\", age = 25)) db$drop(\"users\") db$get_data() unlink(\"database.json\")"},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"method-drop-all-","dir":"Reference","previous_headings":"","what":"Method drop_all()","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"Drop collections available JSON file DB","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"","code":"rlowdb$drop_all()"},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"examples-9","dir":"Reference","previous_headings":"","what":"Examples","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"","code":"db <- rlowdb$new(\"database.json\") db$insert(\"users\", list(name = \"Delta\", age = 25)) db$insert(\"consumers\", list(name = \"Teta\", age = 22)) db$drop_all() db$get_data() unlink(\"database.json\")"},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"method-clear-","dir":"Reference","previous_headings":"","what":"Method clear()","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"Removes records collection without deleting collection ","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"","code":"rlowdb$clear(collection)"},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"collection collection name","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"examples-10","dir":"Reference","previous_headings":"","what":"Examples","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"","code":"db <- rlowdb$new(\"database.json\") db$insert(\"users\", list(name = \"Delta\", age = 25)) db$insert(\"consumers\", list(name = \"Teta\", age = 22)) db$clear(\"users\") db$get_data() unlink(\"database.json\")"},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"method-count-","dir":"Reference","previous_headings":"","what":"Method count()","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"Count number records collection","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"","code":"rlowdb$count(collection)"},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"collection collection name","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"numeric","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"examples-11","dir":"Reference","previous_headings":"","what":"Examples","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"","code":"db <- rlowdb$new(\"database.json\") db$insert(\"users\", list(name = \"Delta\", age = 25)) db$insert(\"users\", list(name = \"Gamma\", age = 36)) db$count(\"users\") unlink(\"database.json\")"},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"method-list-collections-","dir":"Reference","previous_headings":"","what":"Method list_collections()","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"List available collections","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"","code":"rlowdb$list_collections()"},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"character","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"examples-12","dir":"Reference","previous_headings":"","what":"Examples","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"","code":"db <- rlowdb$new(\"database.json\") db$insert(\"users\", list(name = \"Delta\", age = 25)) db$insert(\"consumers\", list(name = \"Teta\", age = 22)) db$list_collections() unlink(\"database.json\")"},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"method-exists-collection-","dir":"Reference","previous_headings":"","what":"Method exists_collection()","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"Check collection exists.","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"","code":"rlowdb$exists_collection(collection)"},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"collection collection name","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"TRUE collection exists, FALSE otherwise","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"examples-13","dir":"Reference","previous_headings":"","what":"Examples","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"","code":"db <- rlowdb$new(\"database.json\") db$insert(\"users\", list(name = \"Delta\", age = 25)) db$insert(\"consumers\", list(name = \"Teta\", age = 22)) db$exists_collection(\"users\") unlink(\"database.json\")"},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"method-exists-key-","dir":"Reference","previous_headings":"","what":"Method exists_key()","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"Check key exists within specific collection.","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"","code":"rlowdb$exists_key(collection, key)"},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"arguments-12","dir":"Reference","previous_headings":"","what":"Arguments","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"collection collection name key key name","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"TRUE key exists, FALSE otherwise","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"examples-14","dir":"Reference","previous_headings":"","what":"Examples","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"","code":"db <- rlowdb$new(\"database.json\") db$insert(\"users\", list(name = \"Delta\", age = 25)) db$insert(\"consumers\", list(name = \"Teta\", age = 22)) db$exists_key(\"users\", \"name\") unlink(\"database.json\")"},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"method-exists-value-","dir":"Reference","previous_headings":"","what":"Method exists_value()","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"Check value exists within specific collection/key combination.","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"","code":"rlowdb$exists_value(collection, key, value)"},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"arguments-13","dir":"Reference","previous_headings":"","what":"Arguments","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"collection collection name key key name value value look ","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"TRUE value exists, FALSE otherwise","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"examples-15","dir":"Reference","previous_headings":"","what":"Examples","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"","code":"db <- rlowdb$new(\"database.json\") db$insert(\"users\", list(name = \"Delta\", age = 25)) db$insert(\"consumers\", list(name = \"Teta\", age = 22)) db$exists_value(\"users\", \"name\", \"Delta\") unlink(\"database.json\")"},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"method-transaction-","dir":"Reference","previous_headings":"","what":"Method transaction()","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"Perform Transaction Rollback Failure method executes sequence operations transaction. operation fails, rolls back changes maintain data integrity.","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"usage-17","dir":"Reference","previous_headings":"","what":"Usage","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"","code":"rlowdb$transaction(transaction_fn)"},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"arguments-14","dir":"Reference","previous_headings":"","what":"Arguments","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"transaction_fn function performs operations `self`. return value.","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"examples-16","dir":"Reference","previous_headings":"","what":"Examples","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"","code":"db <- rlowdb$new(\"database.json\") db$insert(\"users\", list(name = \"Delta\", age = 25)) db$count(\"users\") db$transaction(function() {   db$insert(\"users\", list(name = \"Zlatan\", age = 40))   db$insert(\"users\", list(name = \"Neymar\", age = 28))   # if an error is raised, a rollback will happen and   # the records won't be inserted }) db$count(\"users\") unlink(\"database.json\")"},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"method-restore-","dir":"Reference","previous_headings":"","what":"Method restore()","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"Load JSON backup replace current database.","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"usage-18","dir":"Reference","previous_headings":"","what":"Usage","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"","code":"rlowdb$restore(backup_path)"},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"arguments-15","dir":"Reference","previous_headings":"","what":"Arguments","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"backup_path path backup JSON file. Allow users quickly backup database.","code":""},{"path":[]},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"usage-19","dir":"Reference","previous_headings":"","what":"Usage","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"","code":"rlowdb$backup(backup_path)"},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"arguments-16","dir":"Reference","previous_headings":"","what":"Arguments","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"backup_path path backup JSON file","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"method-search-","dir":"Reference","previous_headings":"","what":"Method search()","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"Search Records Collection method searches records collection specified key's value contains given search term.","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"usage-20","dir":"Reference","previous_headings":"","what":"Usage","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"","code":"rlowdb$search(collection, key, term, ignore.case = FALSE)"},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"arguments-17","dir":"Reference","previous_headings":"","what":"Arguments","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"collection character string specifying name collection. key character string specifying field search within. term character string specifying term search . ignore.case logical value indicating whether search case-insensitive (default: `FALSE`).","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"list matching records. Returns empty list matches found.","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"examples-17","dir":"Reference","previous_headings":"","what":"Examples","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"","code":"db <- rlowdb$new(\"database.json\") db$insert(\"users\", list(id = 1, name = \"Alice\")) db$insert(\"users\", list(id = 2, name = \"Bob\")) db$insert(\"users\", list(id = 3, name = \"alice\"))  # Case-sensitive search db$search(\"users\", \"name\", \"Alice\", ignore.case = FALSE)  # Case-insensitive search db$search(\"users\", \"name\", \"alice\", ignore.case = TRUE) unlink(\"database.json\")"},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"method-bulk-insert-","dir":"Reference","previous_headings":"","what":"Method bulk_insert()","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"Insert Multiple Records Collection method inserts multiple records specified collection . record named list representing entry collection.","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"usage-21","dir":"Reference","previous_headings":"","what":"Usage","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"","code":"rlowdb$bulk_insert(collection, records)"},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"arguments-18","dir":"Reference","previous_headings":"","what":"Arguments","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"collection character string specifying name collection. records list named lists, named list represents record insert.","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"examples-18","dir":"Reference","previous_headings":"","what":"Examples","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"","code":"db <- rlowdb$new(\"database.json\") db$bulk_insert(\"users\", list(   list(id = 1, name = \"Alice\", age = 25),   list(id = 2, name = \"Bob\", age = 32),   list(id = 3, name = \"Charlie\", age = 40) )) db$count(\"users\") unlink(\"database.json\")"},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"objects class cloneable method.","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"usage-22","dir":"Reference","previous_headings":"","what":"Usage","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"","code":"rlowdb$clone(deep = FALSE)"},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"arguments-19","dir":"Reference","previous_headings":"","what":"Arguments","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"deep Whether make deep clone.","code":""},{"path":"https://feddelegrand7.github.io/rlowdb/reference/rlowdb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"rlowdb: A Simple JSON-Based Database in R — rlowdb","text":"","code":"## ------------------------------------------------ ## Method `rlowdb$get_data` ## ------------------------------------------------  db <- rlowdb$new(\"database.json\") db$insert(\"users\", list(id = 1, name = \"Alice\")) db$get_data() #> $users #> $users[[1]] #> $users[[1]]$id #> [1] 1 #>  #> $users[[1]]$name #> [1] \"Alice\" #>  #>  #>  unlink(\"database.json\")  ## ------------------------------------------------ ## Method `rlowdb$insert` ## ------------------------------------------------  db <- rlowdb$new(\"database.json\") db$insert(\"users\", list(id = 1, name = \"Alice\")) unlink(\"database.json\")   ## ------------------------------------------------ ## Method `rlowdb$find` ## ------------------------------------------------  db <- rlowdb$new(\"database.json\") db$insert(\"users\", list(id = 1, name = \"Alice\")) db$find(\"users\", \"id\", 1) #> [[1]] #> [[1]]$id #> [1] 1 #>  #> [[1]]$name #> [1] \"Alice\" #>  #>  unlink(\"database.json\")   ## ------------------------------------------------ ## Method `rlowdb$update` ## ------------------------------------------------  db <- rlowdb$new(\"database.json\") db$insert(\"users\", list(id = 1, name = \"Alice\")) db$update(\"users\", \"id\", 1, list(name = \"Alice Updated\")) unlink(\"database.json\")   ## ------------------------------------------------ ## Method `rlowdb$upsert` ## ------------------------------------------------  db <- rlowdb$new(\"database.json\") db$insert(\"users\", list(id = 100, name = \"Coconut\")) db$upsert(\"users\", \"id\", 1, list(name = \"Alice Updated\")) unlink(\"database.json\")   ## ------------------------------------------------ ## Method `rlowdb$delete` ## ------------------------------------------------  db <- rlowdb$new(\"database.json\") db$insert(\"users\", list(id = 1, name = \"Alice\")) db$delete(\"users\", \"id\", 1) db$get_data() #> $users #> list() #>  unlink(\"database.json\")   ## ------------------------------------------------ ## Method `rlowdb$query` ## ------------------------------------------------  db <- rlowdb$new(\"database.json\") db$insert(\"posts\", list(id = 1, title = \"LowDB in R\", views = 100)) db$insert(\"posts\", list(id = 2, title = \"Data Management\", views = 250)) db$insert(\"posts\", list(id = 3, title = \"Advanced R\", views = 300))  # Query posts with views > 200 AND id > 2 db$query(\"posts\", \"views > 200 & id > 2\") #> [[1]] #> [[1]]$id #> [1] 3 #>  #> [[1]]$title #> [1] \"Advanced R\" #>  #> [[1]]$views #> [1] 300 #>  #>   # Query posts with views > 100 OR id == 1 db$query(\"posts\", \"views > 100 | id == 1\") #> [[1]] #> [[1]]$id #> [1] 1 #>  #> [[1]]$title #> [1] \"LowDB in R\" #>  #> [[1]]$views #> [1] 100 #>  #>  #> [[2]] #> [[2]]$id #> [1] 2 #>  #> [[2]]$title #> [1] \"Data Management\" #>  #> [[2]]$views #> [1] 250 #>  #>  #> [[3]] #> [[3]]$id #> [1] 3 #>  #> [[3]]$title #> [1] \"Advanced R\" #>  #> [[3]]$views #> [1] 300 #>  #>   # Query all posts (no condition) db$query(\"posts\", \"\") #> [[1]] #> [[1]]$id #> [1] 1 #>  #> [[1]]$title #> [1] \"LowDB in R\" #>  #> [[1]]$views #> [1] 100 #>  #>  #> [[2]] #> [[2]]$id #> [1] 2 #>  #> [[2]]$title #> [1] \"Data Management\" #>  #> [[2]]$views #> [1] 250 #>  #>  #> [[3]] #> [[3]]$id #> [1] 3 #>  #> [[3]]$title #> [1] \"Advanced R\" #>  #> [[3]]$views #> [1] 300 #>  #>   unlink(\"database.json\")  ## ------------------------------------------------ ## Method `rlowdb$filter` ## ------------------------------------------------  db <- rlowdb$new(\"database.json\") db$insert(\"users\", list(name = \"Delta\", age = 25)) db$insert(\"users\", list(name = \"Gamma\", age = 36)) # Find users older than 30 db$filter(\"users\", function(record) record$age > 30) #> [[1]] #> [[1]]$name #> [1] \"Gamma\" #>  #> [[1]]$age #> [1] 36 #>  #>  unlink(\"database.json\")  ## ------------------------------------------------ ## Method `rlowdb$drop` ## ------------------------------------------------  db <- rlowdb$new(\"database.json\") db$insert(\"users\", list(name = \"Delta\", age = 25)) db$drop(\"users\") db$get_data() #> named list() unlink(\"database.json\")  ## ------------------------------------------------ ## Method `rlowdb$drop_all` ## ------------------------------------------------  db <- rlowdb$new(\"database.json\") db$insert(\"users\", list(name = \"Delta\", age = 25)) db$insert(\"consumers\", list(name = \"Teta\", age = 22)) db$drop_all() db$get_data() #> named list() unlink(\"database.json\")  ## ------------------------------------------------ ## Method `rlowdb$clear` ## ------------------------------------------------  db <- rlowdb$new(\"database.json\") db$insert(\"users\", list(name = \"Delta\", age = 25)) db$insert(\"consumers\", list(name = \"Teta\", age = 22)) db$clear(\"users\") db$get_data() #> $users #> list() #>  #> $consumers #> $consumers[[1]] #> $consumers[[1]]$name #> [1] \"Teta\" #>  #> $consumers[[1]]$age #> [1] 22 #>  #>  #>  unlink(\"database.json\")  ## ------------------------------------------------ ## Method `rlowdb$count` ## ------------------------------------------------  db <- rlowdb$new(\"database.json\") db$insert(\"users\", list(name = \"Delta\", age = 25)) db$insert(\"users\", list(name = \"Gamma\", age = 36)) db$count(\"users\") #> [1] 2 unlink(\"database.json\")  ## ------------------------------------------------ ## Method `rlowdb$list_collections` ## ------------------------------------------------  db <- rlowdb$new(\"database.json\") db$insert(\"users\", list(name = \"Delta\", age = 25)) db$insert(\"consumers\", list(name = \"Teta\", age = 22)) db$list_collections() #> [1] \"users\"     \"consumers\" unlink(\"database.json\")  ## ------------------------------------------------ ## Method `rlowdb$exists_collection` ## ------------------------------------------------  db <- rlowdb$new(\"database.json\") db$insert(\"users\", list(name = \"Delta\", age = 25)) db$insert(\"consumers\", list(name = \"Teta\", age = 22)) db$exists_collection(\"users\") #> [1] TRUE unlink(\"database.json\")  ## ------------------------------------------------ ## Method `rlowdb$exists_key` ## ------------------------------------------------  db <- rlowdb$new(\"database.json\") db$insert(\"users\", list(name = \"Delta\", age = 25)) db$insert(\"consumers\", list(name = \"Teta\", age = 22)) db$exists_key(\"users\", \"name\") #> [1] TRUE unlink(\"database.json\")  ## ------------------------------------------------ ## Method `rlowdb$exists_value` ## ------------------------------------------------  db <- rlowdb$new(\"database.json\") db$insert(\"users\", list(name = \"Delta\", age = 25)) db$insert(\"consumers\", list(name = \"Teta\", age = 22)) db$exists_value(\"users\", \"name\", \"Delta\") #> [1] TRUE unlink(\"database.json\")  ## ------------------------------------------------ ## Method `rlowdb$transaction` ## ------------------------------------------------  db <- rlowdb$new(\"database.json\") db$insert(\"users\", list(name = \"Delta\", age = 25)) db$count(\"users\") #> [1] 1 db$transaction(function() {   db$insert(\"users\", list(name = \"Zlatan\", age = 40))   db$insert(\"users\", list(name = \"Neymar\", age = 28))   # if an error is raised, a rollback will happen and   # the records won't be inserted }) db$count(\"users\") #> [1] 3 unlink(\"database.json\")  ## ------------------------------------------------ ## Method `rlowdb$search` ## ------------------------------------------------  db <- rlowdb$new(\"database.json\") db$insert(\"users\", list(id = 1, name = \"Alice\")) db$insert(\"users\", list(id = 2, name = \"Bob\")) db$insert(\"users\", list(id = 3, name = \"alice\"))  # Case-sensitive search db$search(\"users\", \"name\", \"Alice\", ignore.case = FALSE) #> [[1]] #> [[1]]$id #> [1] 1 #>  #> [[1]]$name #> [1] \"Alice\" #>  #>  #> [[2]] #> [[2]]$id #> [1] 3 #>  #> [[2]]$name #> [1] \"alice\" #>  #>   # Case-insensitive search db$search(\"users\", \"name\", \"alice\", ignore.case = TRUE) #> [[1]] #> [[1]]$id #> [1] 1 #>  #> [[1]]$name #> [1] \"Alice\" #>  #>  #> [[2]] #> [[2]]$id #> [1] 3 #>  #> [[2]]$name #> [1] \"alice\" #>  #>  unlink(\"database.json\")  ## ------------------------------------------------ ## Method `rlowdb$bulk_insert` ## ------------------------------------------------  db <- rlowdb$new(\"database.json\") db$bulk_insert(\"users\", list(   list(id = 1, name = \"Alice\", age = 25),   list(id = 2, name = \"Bob\", age = 32),   list(id = 3, name = \"Charlie\", age = 40) )) db$count(\"users\") #> [1] 3 unlink(\"database.json\")"}]
